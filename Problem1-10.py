# Problems 1-10 Project Euler
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we
# get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the
# multiples of 3 or 5 below 1000.
import HelperFunctions as HF

def problem1(ceiling):
    sum = 0
    for x in range(1, ceiling):
        if x%3 == 0 or x%5 == 0:
            sum = sum + x
    return sum

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
## OVERVIEW
def problem2(ceiling):
    fiblist = []
    sum_even = 2
    fiblist.append(1)
    fiblist.append(2)
    for x in range(2, 300):
        if fiblist[-1] > ceiling:
            return sum_even
        else:
            fiblist.append(fiblist[x-1] + fiblist[x-2])
        if (fiblist[x] % 2 == 0):
            sum_even = sum_even + fiblist[x]
    return None

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143?
def problem3(dividend):
    quotient = 2
    divisor = 2
    while quotient >= 2:
        if HF.isPrime(divisor) and dividend % divisor == 0:
            quotient = dividend/divisor
            if HF.isPrime(quotient):
                return quotient
            dividend = quotient
        else:
            divisor = divisor + 1
    return 2

def problem3_2(dividend):
    return HF.maxInList(HF.primeFactors(dividend))

# A palindromic number reads the same both ways. The largest palindrome made from
# the product of two 2-digit numbers is 9009=91X99. Find the largest palindrome
# made from the product of two 3-digit numbers.
# OVERVIEW
def problem4(start, offset):
    product = 0
    for x in range (start, start + 1 + offset):
        for j in range (start, start + 1 + offset):
            product = x * j
            if HF.palindrome(product):
                highest = product
    return highest

# 2520 is the smallest number that can be divided by each of the numbers
# from 1 to 10 without any remainder. What is the smallest positive
# number that is evenly divisible by all of the numbers from 1 to 20?
def problem5 (ceiling):
    for x in range(2, 300000000, 2):
        ceiling_found = 1
        for y in range(2,ceiling+1):
            if x % y == 0:
                ceiling_found = ceiling_found + 1
                if ceiling_found == ceiling:
                    return x
    return None

# Difference between the square of sums and the sum of squares
def problem6 (x):
    sumOfSquares = []
    squareOfSums = []
    for x in range(1, x+1):
        sumOfSquares.append(x**(2))
        squareOfSums.append(x)
    return (HF.performOpOnList(squareOfSums,1))**(2) - HF.performOpOnList(sumOfSquares,1)

# By listing the first six prime numbers: 2,3,5,7,11 and 13, we see that the
# 6th prime number is 13. What is the 10 001st prime number?
def problem7 (ourNumber):
    num = 2
    if ourNumber == 1:
        return 2
    while ourNumber >= 1:
        if (HF.isPrime(num)):
            ourNumber = ourNumber - 1
            if ourNumber == 0:
                return num
            else:
                num = num + 1
        else:
            num = num + 1
    return num

# Find the largest product of thirteen numbers in the list below
def problem8 ():
    data = ("731671765313306249192251196744265747423553491949349"
"6983520312774506326239578318016984801869478851843"
"85861560789112949495459501737958331952853208805511"
"12540698747158523863050715693290963295227443043557"
"66896648950445244523161731856403098711121722383113"
"62229893423380308135336276614282806444486645238749"
"30358907296290491560440772390713810515859307960866"
"70172427121883998797908792274921901699720888093776"
"65727333001053367881220235421809751254540594752243"
"52584907711670556013604839586446706324415722155397"
"53697817977846174064955149290862569321978468622482"
"83972241375657056057490261407972968652414535100474"
"82166370484403199890008895243450658541227588666881"
"16427171479924442928230863465674813919123162824586"
"17866458359124566529476545682848912883142607690042"
"24219022671055626321111109370544217506941658960408"
"07198403850962455444362981230987879927244284909188"
"84580156166097919133875499200524063689912560717606"
"05886116467109405077541002256983155200055935729725"
"71636269561882670428252483600823257530420752963450")
    max = 1
    x=0
    while x < len(data) - 13:
        current =int(data[x])*int(data[x+1])*int(data[x+2])*int(data[x+3])
        current = current *int(data[x+4])*int(data[x+5])*int(data[x+6])
        current = current *int(data[x+7])*int(data[x+8])*int(data[x+9])
        current = current *int(data[x+10])*int(data[x+11])*int(data[x+12])
        if current > max:
            max = current
        x = x+1
    return max

# Special Pythagorean triplet
# A pythagorean triplet is a set of three natural numbers, a<b<c s.t.
# a**2 + b**2 = c**2
# Find the one triplet where a + b + c = 1000
def problem9():
    for a in range(0,500):
        for b in range (0,500):
            for c in range(0,500):
                if a<b and b<c and a<c and a+b+c == 1000 and (a**2 + b**2 == c**2):
                    #print (str(a) + " " + str(b) + " " +str(c))
                    return a*b*c
    return None

# Summation of primes
# Find the sum of the primes below 2 million
def problem10(x):
    sum = 2
    for a in range(1,x,2):
        if HF.isPrime(a):
            sum = sum + a
    return sum

# 233168
#print (problem1(1000))
# 4613732
#print (problem2(4000000))
# 6857
#print (problem3(600851475143))
#print (problem3_2(600851475143))
# 906609
#print (problem4(800, 199))
# 232792560 -- only numbers under 20
#print (problem5(16))
# 25164150
#print (problem6(100))
#104743
#print (problem7(10001))
#23514624000
#print (problem8 ())
#31875000
#print (problem9())
#142913828922
#print (problem10(2000000))
